////////////////////////////////////////////////////////////////////////////////
//
// PLUGIN_VERSION is the common version name when describing the plugin.
// ATAK_VERSION   is for the version of ATAK this plugin should be compatible
//                with some examples include 3.11.0, 3.11.0.civ 3.11.1.fvey
//
////////////////////////////////////////////////////////////////////////////////

buildscript {

    ext.PLUGIN_VERSION = "1.0"
    ext.ATAK_VERSION = "4.8.1"

    def takdevVersion = '2.+'

    ext.getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
                getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        return getProperty(urlKey, null) != null
    }

    ext.takrepoUrl = getProperty(urlKey, 'http://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', "${rootDir}/../../atak-gradle-takdev.jar")

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url = takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
    }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.2'
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
    }
 }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'atak-takdev-plugin'






// Attempt to get a suitable version name for the plugin based on
// either a git or svn repository
def getVersionName() {
    try {
            def stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-parse', '--short=8', 'HEAD'
                standardOutput = stdout
            }
            def describe = stdout.toString().trim()
            println("versionName[git]: $describe")
            return describe
    } catch (Exception ignored) {
       println("error occured, using revision of 1")
       return 1
    }
}


// Attempt to get a suitable version code for the plugin based on
// either a git or svn repository
def getVersionCode() {
    try {
        new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    executable = 'git'
                    args = ['show', '-s', '--format=%ct']
                    standardOutput = os
                    ignoreExitValue = true
                }

            def outputAsString = os.toString()
                ext.revision = "$outputAsString".toInteger()

                 println("version[git]: $revision")
        }
    } catch (Exception ignored) {
       println("error occured, using revision of 1")
       ext.revision = 1
    }

    return revision
}


android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

   dexOptions {
        jumboMode = true
    }

    lintOptions {
          checkReleaseBuilds true
          // Or, if you prefer, you can continue to check for errors in release builds,
          // but continue the build even when errors are found:
          abortOnError true
      }

    signingConfigs {
        debug {
            def kf = file('../ca/debug.keystore')
            def kfp = 'android'
            def ka = 'androiddebugkey'
            def kp = kfp

            if (kf == null) {
                 throw new GradleException("No signing key configured!")
            }
 
            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }
        release {
            def kf = file('../ca/debug.keystore')
            def kfp = 'android'
            def ka = 'androiddebugkey'
            def kp = kfp

            if (kf == null) {
                 throw new GradleException("No signing key configured!")
            }

            storeFile file(kf)
            if (kfp != null) storePassword kfp
            if (ka != null) keyAlias ka
            if (kp != null) keyPassword kp
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }

        release {
            minifyEnabled true
            proguardFile 'proguard-gradle.txt'
            signingConfig signingConfigs.release
            matchingFallbacks = ['odk']
        }
    }

    flavorDimensions "application"

    productFlavors {
        mil {

            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".MIL"]
        }
        civ {
            getIsDefault().set(true)
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
        aus {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".AUS"]
        }
        nzl {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NZL"]
        }
        prt {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".PRT"]
        }
        nor {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NOR"]
        }
        hun {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".HUN"]
        }
        bel {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".BEL"]
        }
        swe {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".SWE"]
        }
        natosof {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".NATOSOF"]
        }
        gbr {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".GBR"]
        }
        gov {
            dimension "application"
            // GOV builds are just CIV api builds with additional information in the strings file 
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CIV"]
        }
        can {
            dimension "application"
            manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".CAN"]
        }
        }

    packagingOptions {
        exclude 'META-INF/NOTICE.md'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/*'
        exclude 'META-INF/**'
        exclude 'module-info'

        //resources.excludes.add("META-INF/*")
        // resources.excludes.add("META-INF/NOTICE.md")
    }

    sourceSets {
        main {

            // It is strongly encouraged that plugin developers do not modify the archiveBaseName, version code logic and version 
            // name logic to provide for consistency within the community.   
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"
        }

        gov.java.srcDirs 'src/gov/java'
        gov.assets.srcDir 'src/gov/assets'
        gov.res.srcDir 'src/gov/res'

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')

    }

    defaultConfig {
        minSdkVersion 21
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    // https://mvnrepository.com/artifact/com.graphhopper/graphhopper-core
    implementation (group: 'com.graphhopper', name: 'graphhopper-core', version: '6.0') {
        exclude group : 'com.fasterxml.jackson.core' // reimported directly to remove module-info
        exclude group : 'jakarta.xml.bind'// reimported directly to remove multirelease jar
        exclude group : 'com.fasterxml.jackson.dataformat' // reimported directly to remove module-info
        exclude group : 'com.fasterxml.jackson.module' // reimported directly to remove module-info
        exclude group : 'com.fasterxml.woodstox' // reimported directly to remove module-info
        exclude group : 'org.codehaus.woodstox' // reimported directly to remove module-info
    }
    implementation ( group: 'com.graphhopper' , name: 'directions-api-client-hc' , version: '6.0' ) {
        exclude group : 'com.fasterxml.jackson.core' // reimported directly to remove module-info
        exclude group : 'jakarta.xml.bind'// reimported directly to remove multirelease jar
        exclude group : 'com.fasterxml.jackson.dataformat' // reimported directly to remove module-info
        exclude group : 'com.fasterxml.jackson.module' // reimported directly to remove module-info
        exclude group : 'com.fasterxml.woodstox' // reimported directly to remove module-info
        exclude group : 'org.codehaus.woodstox' // reimported directly to remove module-info
    }
    // tried to use jar jar to remove modle-info https://github.com/google/gson/issues/1627#issuecomment-856734057
    // does not work



    implementation files ('../libs/jakarta.xml.bind-api-2.3.2.jar')
    implementation files ('../libs/gson-2.8.9.jar')
    implementation files ('../libs/jackson-annotations-2.10.5.jar')
    implementation files ('../libs/jackson-core-2.10.5.jar')
    implementation files ('../libs/jackson-databind-2.10.5.1.jar')
    implementation files ('../libs/jackson-dataformat-xml-2.10.5.jar')
    implementation files ('../libs/jackson-module-jaxb-annotations-2.10.5.jar')
    implementation files ('../libs/stax2-api-4.2.1.jar')
    implementation files ('../libs/woodstox-core-6.2.1.jar')

    implementation ('androidx.constraintlayout:constraintlayout:1.1.0') {
        exclude module: 'collection'
        exclude module: 'core'
        exclude module: 'lifecycle'
        exclude module: 'core-common'
        exclude module: 'collection'
        exclude module: 'customview'
        exclude module: 'collection'
    }



    /* implementation ('androidx.recyclerview:recyclerview:1.2.1') {
        exclude module: 'collection'
        exclude module: 'core'
        exclude module: 'lifecycle'
        exclude module: 'core-common'
        exclude module: 'collection'
        exclude module: 'customview'
    }

     */

}

